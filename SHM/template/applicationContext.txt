<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
  http://www.springframework.org/schema/beans/spring-beans.xsd  
  http://www.springframework.org/schema/aop   
  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
  http://www.springframework.org/schema/tx   
  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
  http://www.springframework.org/schema/context   
  http://www.springframework.org/schema/context/spring-context-4.0.xsd
  http://www.springframework.org/schema/util   
  http://www.springframework.org/schema/util/spring-util-4.0.xsd
  " >
	<!-- 放弃这种方式，因为这样会使得配置文件中需要配置很多bean，所以使用注解
	<bean id="helloWorldService" class="com.[domainName].service.HelloWorldServiceImpl"></bean>
	<bean id="helloWorldAction" class="com.[domainName].web.HelloWorldAction" scope="prototype">
		<property name="hws" ref="helloWorldService"></property>
	</bean>
	-->
	
	<context:annotation-config /> 
	<!--
		@Compoment这类型注解的类都是需要被扫描
		说白就是：让Spring的ApplicationContext去加载和初始化所有加了注解的类，给实例化
		@Repository:dao层 就是数据层的
		@Service:service层的
		@Controller:web层比如：action和springmvc-controller类
	 -->
	<!-- 扫描文件所在dao包  使用注解的前提-->
	<context:component-scan base-package="com.[domainName].dao"></context:component-scan>
	<context:component-scan base-package="com.[domainName].service"></context:component-scan>
	<context:component-scan base-package="com.[domainName].web"></context:component-scan>
	<context:component-scan base-package="com.[domainName].core.interceptor"></context:component-scan>
	
	<!-- 指定分散配置的文件的位置 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 配置c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverclass}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="maxPoolSize" value="${c3p0.pool.size.max}" />
        <property name="minPoolSize" value="${c3p0.pool.size.min}" />
        <property name="initialPoolSize" value="${c3p0.pool.size.ini}" />
        <property name="acquireIncrement" value="${c3p0.pool.size.increment}" />
    </bean>
    
    <!-- 本地会话工厂bean,spring整合hibernate的核心入口 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        
        <property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		 </property>
		<!-- 获取实体目录 也就是使用注解的方式，不再使用hbm.xml配置文件 -->
		<property name="packagesToScan" value="com.[domainName].model"></property>
        
        <!-- 指定hibernate自身的属性 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop> 
            </props>
        </property>
        
    </bean>

	<!-- 设定transactionManager -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!--启动spring事务注解功能 -->
	<tx:annotation-driven transaction-manager="txManager" />
    
</beans>
